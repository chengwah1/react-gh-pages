{"version":3,"sources":["component/Stats.js","component/Stopwatch.js","component/Header.js","component/Counter.js","component/Player.js","component/AddPlayerForm.js","component/App.js","serviceWorker.js","index.js"],"names":["Stats","props","totalPlayer","players","length","totalPoint","reduce","total","score","react_default","a","createElement","className","Stopwatch","state","isRuning","elapsedTime","previousTime","handleStopwatch","_this","setState","Date","now","tick","handleReset","this","intervalID","setInterval","clearInterval","Math","floor","onClick","Component","Header","component_Stats","title","component_Stopwatch","Counter","index","changeScore","Player","removePlayer","id","name","component_Counter","AddPlayerForm","value","handleChange","e","target","handleSubmit","preventDefault","addPlayer","onSubmit","type","onChange","placeholder","App","handleScoreChange","delta","prevState","handleRemovePlayer","filter","p","prevPlayerId","handleAddPlayer","concat","Object","toConsumableArray","_this2","component_Header","map","player","component_Player","key","toString","component_AddPlayerForm","Boolean","window","location","hostname","match","ReactDOM","render","component_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ba1e85dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Stats = (props) => {\r\n    const totalPlayer = props.players.length;\r\n    const totalPoint = props.players.reduce((total,players)=>{\r\n        return total+players.score;\r\n    },0);\r\n    return(\r\n        <table className=\"stats\">\r\n            <tbody>\r\n                <tr>\r\n                    <td>Player:</td>\r\n                    <td>{totalPlayer}</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Total Points:</td>\r\n                    <td>{totalPoint}</td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default Stats;","import React ,{Component} from 'react';\r\nclass Stopwatch extends Component {\r\n    state={\r\n        isRuning: false,\r\n        elapsedTime:0,\r\n        previousTime:0\r\n    };\r\n    handleStopwatch = ()=>{\r\n        this.setState(\r\n            {isRuning:!this.state.isRuning}\r\n        );\r\n        if(!this.state.isRuning){\r\n            this.setState({previousTime: Date.now()})\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.intervalID = setInterval(this.tick,100)\r\n    }\r\n    componentWillUnmount(){\r\n        clearInterval(this.intervalID);\r\n    }\r\n    tick =()=> {\r\n        if(this.state.isRuning){\r\n            const now = Date.now();\r\n            this.setState({\r\n                previousTime:now,\r\n                elapsedTime: this.state.elapsedTime + (now - this.state.previousTime)\r\n            })\r\n        }\r\n    }\r\n    handleReset=()=>{\r\n        this.setState({\r\n            elapsedTime:0\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"stopwatch\">\r\n                <h2>Stopwatch</h2>\r\n                <span className=\"stopwatch-time\">{Math.floor(this.state.elapsedTime/1000)}</span>\r\n                <button onClick={this.handleStopwatch}>{this.state.isRuning?'Stop':'Start'}</button>\r\n                <button onClick={this.handleReset}>Restart</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Stopwatch;","import React from 'react';\r\nimport Stats from './Stats';\r\nimport Stopwatch from './Stopwatch';\r\nconst Header = (props) => {\r\n    return (\r\n      <header>\r\n        <Stats \r\n        players={props.players}\r\n        />\r\n        <h1>{ props.title }</h1>\r\n        <Stopwatch/>\r\n      </header>\r\n    );\r\n  }\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nconst Counter = (props) => {\r\n    \r\n    const index = props.index;\r\n      return (\r\n        <div className=\"counter\">\r\n          <button className=\"counter-action decrement\" onClick={()=>props.changeScore(index, -1)}> - </button>\r\n          <span className=\"counter-score\">{ props.score }</span>\r\n          <button className=\"counter-action increment\" onClick={()=>props.changeScore(index, +1)}> + </button>\r\n        </div>\r\n      );\r\n  }\r\n\r\nexport default Counter;","import React, { Component } from 'react';\r\nimport Counter from './Counter';\r\n\r\nconst Player = (props) => {\r\n    return (\r\n      <div className=\"player\">\r\n        <span className=\"player-name\">\r\n          <button className=\"remove-player\" onClick={() => props.removePlayer(props.id)}>âœ–</button>\r\n          { props.name }\r\n        </span>\r\n  \r\n        <Counter \r\n            score = {props.score}\r\n            index={props.index}\r\n            changeScore={props.changeScore}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Player;","import React ,{ Component } from 'react';\r\n\r\nclass AddPlayerForm extends Component{\r\n    state = {\r\n        value: \"\"\r\n    };\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value});\r\n    }\r\n    handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        this.props.addPlayer(this.state.value);\r\n        this.setState({value:''})\r\n    }\r\n    render(){\r\n        return(\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input \r\n                type=\"text\"\r\n                value={this.state.value}\r\n                onChange={this.handleChange}\r\n                placeholder=\"enter a player's name\"\r\n                />\r\n                <input\r\n                type=\"submit\"\r\n                placeholder=\"Add Player\"/>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default AddPlayerForm;","import React, { Component } from 'react';\nimport Header from './Header';\nimport Player from './Player';\nimport AddPlayerForm from './AddPlayerForm';\n\n\nclass App extends Component {\n  state = {\n    players: [\n      {\n        name: \"John\",\n        score: 0,\n        id: 1\n      },\n      {\n        name: \"Treasure\",\n        score: 0,\n        id: 2\n      },\n      {\n        name: \"Ashley\",\n        score: 0,\n        id: 3\n      },\n      {\n        name: \"James\",\n        score: 0,\n        id: 4\n      }\n    ]\n  };\n \n  handleScoreChange = (index, delta) => {\n    this.setState( prevState => ({\n      score: prevState.players[index].score += delta\n    }));\n    \n  }\n\n  handleRemovePlayer = (id) => {\n    this.setState( prevState => {\n      return {\n        players: prevState.players.filter(p => p.id !== id)\n      };\n    });\n  }\n  prevPlayerId = 4;\n  handleAddPlayer = (name)=>{\n    this.setState(prevState =>{\n      return {\n        players: [\n          ...prevState.players,\n          {\n            name: name,\n            score: 0,\n            id: this.prevPlayerId+=1\n          }\n        ]\n      };\n      \n    });\n  }\n  render() {\n    return (\n      <div className=\"scoreboard\">\n        <Header \n          title=\"Scoreboard\" \n          players={this.state.players} \n        />\n       \n  \n        {/* Players list */}\n        {this.state.players.map( (player, index) =>\n          <Player \n            name={player.name}\n            score={player.score}\n            id={player.id}\n            key={player.id.toString()} \n            index={index}\n            changeScore={this.handleScoreChange}\n            removePlayer={this.handleRemovePlayer}           \n          />\n        )}\n\n        <AddPlayerForm\n        addPlayer={this.handleAddPlayer}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './component/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}